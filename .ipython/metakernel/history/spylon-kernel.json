["def sayHello(callback: () => Unit) {\n    callback()\n}", "def sayHello(callback: () => Unit) {\n    callback()\n}", "def helloTrite(): Unit = { println(\"Hello, Trite\") }", "def helloTrite(): Unit = { println(\"Hello, Trite\") }\n\nsayHello(helloTrite)", "def executeAndPrint(f: (Int, Int) => Int, x: Int, y: Int): Unit = {\n    val result = f(x, y)\n    println(result)\n}\n\ndef sum(x: Int, y: Int) = x + y\ndef multiply(x: Int, y: Int) = x * y\n\nexecuteAndPrint(sum, 3, 11)\nexecuteAndPrint(multiply, 3, 9)", "def executeAndPrint(f: (Int, Int) => Int, x: Int, y: Int): Unit =\n    println(f(x, y))\n\ndef sum(x: Int, y: Int) = x + y\ndef multiply(x: Int, y: Int) = x * y\n\nexecuteAndPrint(sum, 3, 11)\nexecuteAndPrint(multiply, 3, 9)", "## Taking multiple functions as input parameters", "def myFunc(f1: (Int, Int) => Int, f2: (Int, Int) => Int, x, y): (Int, Int) =\n    (f1(x, y), f2(x, y))\n\ndef sum(x: Int, y: Int) = x + y\ndef multiply(x: Int, y: Int) = x * y\n\nmyFunc(sum, multiply, 9, 27)", "def myFunc(f1: (Int, Int) => Int, f2: (Int, Int) => Int, x: Int, y: Int): (Int, Int) =\n    (f1(x, y), f2(x, y))\n\ndef sum(x: Int, y: Int) = x + y\ndef multiply(x: Int, y: Int) = x * y\n\nmyFunc(sum, multiply, 9, 27)", "def execTwoFunctions(f1:(Int, Int) => Int,\n                     f2:(Int, Int) => Int,\n                     a: Int,\n                     b: Int): Tuple2[Int, Int] =\n    (f1(a,b), f2(a,b))", "def execTwoFunctions(f1:(Int, Int) => Int,\n                     f2:(Int, Int) => Int,\n                     a: Int,\n                     b: Int): Tuple2[Int, Int] =\n    (f1(a,b), f2(a,b))\n\ndef sum(x: Int, y: Int) = x + y\ndef multiply(x: Int, y: Int) = x * y\n\nexecTwoFunctions(sum, multiply, 2, 10)", "def map(f: (?) => ?, list: List[Int]): ???", "// def map(f: (?) => ?, list: List[Int]): ???", "def map[A](f: Int => A, list: List[Int]): List[A] = ???", "def map[A](f: Int => A, list: List[Int]): List[A] = ???\n23", "def map[A](f: Int => A, list: List[Int]): List[A] = ???", "def map[A](f: Int => A, list: List[Int]): List[A] = ???\n0", "def map[A](f: Int => A, list: List[Int]): List[A] = ???\n42", "def map[A,B](f: A => B, list: List[A]): List[B] = ???\n42", "def map[A,B](f: A => B, list: Seq[A]): Seq[B] = {\n    for {\n        x <- list\n    } yield f(x)\n}", "def map[A,B](f: A => B, list: Seq[A]): Seq[B] = ???", "def map[A,B](f: A => B, list: Seq[A]): Seq[B] = ???\n42", "def map[A,B](f: A => B, list: Seq[A]): Seq[B] = ???\n42 // returning a value to prevent the output from vomiting everywhere", "def map[A,B](f: A => B, list: Seq[A]): Seq[B] = ???\n42 // returning a value to prevent the cell output from vomiting everywhere", "def map[A,B](f: A => B, list: Seq[A]): Seq[B] = ???\n42 // returning a value to prevent the cell output vomiting everywhere", "def filter[A,B](f: () => Bool, list: Seq[A]): Seq[B] = {\n    for {\n        x <- list if f()\n    } yield x\n}", "def filter[A](f: () => Bool, list: Seq[A]): Seq[A] = {\n    for {\n        x <- list if f()\n    } yield x\n}", "def filter[A](f: () => Boolean, list: Seq[A]): Seq[A] = {\n    for {\n        x <- list if f()\n    } yield x\n}", "def filter[A](f: () => Boolean, list: Seq[A]): Seq[A] = {\n    for {\n        x <- list if f()\n    } yield x\n}\n\nfilter(() => x % 2 == 0, List(1, 2, 3, 4, 5, 6))", "def filter[A](f: A => Boolean, list: Seq[A]): Seq[A] = {\n    for {\n        x <- list if f(x)\n    } yield x\n}\n\nfilter(x => x % 2 == 0, List(1, 2, 3, 4, 5, 6))", "def filter[A](f: A => Boolean, list: Seq[A]): Seq[A] = {\n    for {\n        x <- list if f(x)\n    } yield x\n}\n\nfilter(x: Boolean => x % 2 == 0, List(1, 2, 3, 4, 5, 6))", "def filter[A](f: A => Boolean, list: Seq[A]): Seq[A] = {\n    for {\n        x <- list if f(x)\n    } yield x\n}\n\ndef isEven(x: Int): Boolean =\n    x % 2 == 0\n\nfilter(x => x % 2 == 0, List(1, 2, 3, 4, 5, 6))", "def filter[A](f: A => Boolean, list: Seq[A]): Seq[A] = {\n    for {\n        x <- list if f(x)\n    } yield x\n}\n\ndef isEven(x: Int): Boolean =\n    x % 2 == 0\n\nfilter(isEven, List(1, 2, 3, 4, 5, 6))", "def filter[A](f: A => Boolean, list: Seq[A]): Seq[A] = {\n    for {\n        x <- list if f(x)\n    } yield x\n}\n\ndef isEven(x: Int): Boolean =\n    x % 2 == 0\n\nfilter(isEven, List(1, 2, 3, 4, 5, 6))", "Range(1,20)", "def filter[A](f: A => Boolean, list: Seq[A]): Seq[A] = {\n    for {\n        x <- list if f(x)\n    } yield x\n}\n\ndef isEven(x: Int): Boolean =\n    x % 2 == 0\n\nfilter(isEven, Range(1,20))", "def filter[A](f: A => Boolean, list: Seq[A]): Seq[A] = {\n    for {\n        x <- list if f(x)\n    } yield x\n}\n\ndef isEven(x: Int): Boolean =\n    x % 2 == 0\n\nfilter(isEven, Range(1,21))", "Range(1,20)", "def filter[A](f: A => Boolean, list: Seq[A]): Seq[A] = {\n    for {\n        x <- list if f(x)\n    } yield x\n}\n\ndef isEven(x: Int): Boolean =\n    x % 2 == 0\n\nfilter(isEven, Range(1,21))", "Range(1,20)", "def filter[A](f: A => Boolean, list: Seq[A]): Seq[A] = {\n    for {\n        x <- list if f(x)\n    } yield x\n}\n\ndef isEven(x: Int): Boolean =\n    x % 2 == 0\n\nfilter(isEven, Range(1,21))", "def filter[A](f: A => Boolean, list: Seq[A]): Seq[A] = {\n    for {\n        x <- list if f(x)\n    } yield x\n}\n\ndef isEven(x: Int): Boolean =\n    x % 2 == 0\n\nfilter(isEven, Range(1,21))"]